#!/usr/bin/env python# -*- coding: utf-8 -*-# @Time    : 2023/12/27 22:15# @Author  : summer# @Site    :# @File    : rename_fapiao.py# @Software: PyCharm'''1.pdf转PIL2.PIL 进百度API 识别，输出文件名3.重命名pdf'''import base64import globimport osimport os.pathimport reimport shutilimport tempfileimport pandas as pdimport requestsfrom PIL import Imagefrom pdf2image import convert_from_pathfrom decouple import Config,RepositoryEnvdef pdf2jpg(filename, outputDir):    with tempfile.TemporaryDirectory() as path:        images = convert_from_path(pdf_path=filename, dpi=200, output_folder=None, last_page=1,                                   first_page=None,                                   fmt='jpg')        for index, img in enumerate(images):            (path, filename) = os.path.split(filename)            (file, ext) = os.path.splitext(filename)            output_path = os.path.join(outputDir, file + '_page_%s.jpg' % (index))            img.save(output_path)    return output_pathdef convertjpg(jpgfile,outdir,width=1920,height=1215):    img=Image.open(jpgfile)    try:        new_img=img.resize((width,height),Image.BILINEAR)        new_img.save(os.path.join(outdir,os.path.basename(jpgfile)))    except Exception as e:        print(e)    return os.path.join(outdir,os.path.basename(jpgfile))def get_access_token(AK, SK):    host = 'https://aip.baidubce.com/oauth/2.0/token?grant_type=client_credentials&client_id=' + AK + '&client_secret=' + SK    response = requests.get(host)    #     if response:    #         print(response.json())    return response.json().get('access_token')def renew_keys():    configuration = Config(repository = RepositoryEnv('config.env'))    AK = configuration.get('AK')    SK = configuration.get('SK')    access_token = get_access_token(AK, SK)  # access_token 从上面模块中定义的函数实时提取    print('access_token更新成功：' + access_token)    return access_tokendef OCR_vat(jpgpath, access_token):    f = open(jpgpath, 'rb')    img = base64.b64encode(f.read())    params = {"image": img}    request_url_0 = "https://aip.baidubce.com/rest/2.0/ocr/v1/vat_invoice"  #电子发票识别url    request_url = request_url_0 + "?access_token=" + access_token    headers = {'content-type': 'application/x-www-form-urlencoded'}    j = requests.post(request_url, data=params, headers=headers)    if j:        return j.json().get('words_result')    else:        return (print('识别失败',jpgpath))def parse_data(json_data):    try:        data={            "InvoiceCode":json_data.get("InvoiceCode"),            "InvoiceNum":json_data.get("InvoiceNum")            }        file_name = data.get("InvoiceCode") + '_' + data.get("InvoiceNum")        return str(file_name)    except Exception as e:        print(e)        return print(f'解析失败:{json_data}')def rename_pdf(rsc,oldname,dst,filename):    os.rename(rsc,os.path.join(dst,filename))    # print('{}--->{}'.format(oldname, filename))    return Nonedef parse_content(json_data):    try:        data={            "InvoiceType":str(json_data.get("InvoiceType")),            "InvoiceCode":str(json_data.get("InvoiceCode")),            "InvoiceNum":str(json_data.get("InvoiceNum")),            "InvoiceDate": str(json_data.get("InvoiceDate")),            "CheckCode": str(json_data.get("CheckCode")),            "PurchaserName": str(json_data.get("PurchaserName")),            "PurchaserRegisterNum": json_data.get("PurchaserRegisterNum"),            "SellerName": json_data.get("SellerName"),            "SellerRegisterNum": json_data.get("SellerRegisterNum"),            "TotalAmount": float(json_data.get("TotalAmount")),#不含税金额            "AmountInFiguers": float(json_data.get("AmountInFiguers")),#价税合计            "Remarks": json_data.get("Remarks")            }        df = pd.DataFrame( data = data, index ={'序号'})        return df    except Exception as e:        print(e)        print(f'解析失败:{json_data}')        return None #如果解析失败，返回一个空的dataframe#写一个函数，正则匹配获取InvoiceDate的月份，然后转换成数字def get_month(InvoiceDate):    try:        month=re.findall(r'\d+',InvoiceDate)[1]        return str(month)    except Exception as e:        print(e)        return str(InvoiceDate)def get_year(InvoiceDate):    try:        year=re.findall(r'\d+',InvoiceDate)[0]        return str(year)    except Exception as e:        print(e)        return str(InvoiceDate)if __name__ == "__main__":    step=0 #标记进度    targetdir: str=input('Enter the target dir:')  #输入目标文件夹    #遍历targetir目录下的所有pdf文件    rscfiles=glob.glob(targetdir+'/**/*.[pP][dD][fF]',recursive=True) #获取目标文件夹下的所有pdf文件    print(f'共有{len(rscfiles)}个pdf文件待处理')    outdir=os.path.join("./")+"/temp"    if not os.path.exists(outdir):        os.makedirs(outdir)    access_token=renew_keys()    df_sum=[]    for rscfile in rscfiles:        print(rscfile)        jpgfile = pdf2jpg(rscfile, outputDir=outdir)        convertjpg(jpgfile=jpgfile, outdir=outdir)        json_data = OCR_vat(jpgpath=jpgfile, access_token=access_token)        file_name = str(parse_data(json_data)) + '.pdf'        #如果targetdir目录下不存在名为PurchaserName的文件夹，则创建一个。        if not os.path.exists(os.path.join(targetdir,str(json_data.get("PurchaserName")))):            os.makedirs(os.path.join(targetdir,str(json_data.get("PurchaserName"))))        # 如果PurchaserName目录下不存在对应月份名称的文件夹，则创建一个。        if not os.path.exists(os.path.join(targetdir,str(json_data.get("PurchaserName")),get_year(json_data.get( "InvoiceDate" )),get_month(json_data.get( "InvoiceDate" )))):            os.makedirs(os.path.join(targetdir,str(json_data.get("PurchaserName")),get_year(json_data.get( "InvoiceDate" )),get_month(json_data.get( "InvoiceDate" ))))        dst=os.path.join(targetdir,str(json_data.get("PurchaserName")),get_year(json_data.get( "InvoiceDate" )),get_month(json_data.get( "InvoiceDate" )))        rename_pdf(rsc=rscfile, oldname=rscfile.split('/')[-1], dst=dst, filename=file_name)        step+=1        print(f'已完成{step}/{len(rscfiles)}个文件的处理')        df_sum.append(parse_content(json_data))    result =pd.concat(df_sum).sort_values('InvoiceDate', ascending=True)    #合并dataframe，并按照InvoiceDate排序    result.drop_duplicates(inplace=True)    #去重    result.index = pd.Index(range(1,len(result)+1),name = "序号")    result.to_excel(excel_writer=str(targetdir+"/sum.xlsx"))    shutil.rmtree(outdir)    print(f'finished with {len(rscfiles)} invoice files')